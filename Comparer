import pandas as pd
from glob import glob
import os
import numpy as np
import time


def files():
    filepath = r'' # Input filepath
    newest_file = max(glob(filepath), key=os.path.getmtime)
    previous_file = sorted(glob(filepath), key=os.path.getmtime)[-2]
    print(f'Latest file: ' + newest_file)
    print(f'Previous file: ' + previous_file)
    return newest_file, previous_file


newest_file, previous_file = files()
sheets_list = pd.read_excel(newest_file, sheet_name=None)


def comparer():
    for index, elem in enumerate(sheets_list):
        df1 = pd.read_excel(previous_file, skiprows=[1,2], header=1, sheet_name=index)
        df2 = pd.read_excel(newest_file, skiprows=[1,2], header=1, sheet_name=index)
        print('\n' + list(sheets_list.keys())[index])

        try:
            df1 = df1.set_index('Batch')
            df2 = df2.set_index('Batch')

            df3 = pd.concat([df1, df2], sort=False)
            df3a = df3.stack().groupby(level=[0, 1]).unique().unstack(1).copy()

            df3a.loc[~df3a.index.isin(df2.index), 'Status'] = 'Deleted' 
            df3a.loc[~df3a.index.isin(df1.index), 'Status'] = 'New' 
            idx = df3.stack().groupby(level=[0, 1]).nunique() 
            df3a.loc[idx.mask(idx <= 1).dropna().index.get_level_values(0), 'Status'] = 'Modified'
            df3a['Status'] = df3a['Status'].fillna('same') 

            df3a = df3a.replace(np.nan, '', regex=True)
            filtered_df3a = df3a[df3a['Status'] != 'same']
            pd.set_option('display.show_dimensions', False)
            pd.set_option('display.max_rows', None)
            pd.set_option('display.max_columns', None)
            pd.set_option('display.width', None)

            non_empty_sheets = {}

            if not filtered_df3a.empty:
                non_empty_sheets[index] = filtered_df3a

            try:
                filtered_sheets = ((list(non_empty_sheets.items()).pop(0))[1:])
                print(*filtered_sheets)

            except IndexError:
                pass

        except (ValueError, KeyError):
            pass


def main():
    time.sleep(1)
    comparer()


if __name__ == '__main__':
    main()
